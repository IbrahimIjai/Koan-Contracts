// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {AutomationCompatibleInterface} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";
import {AggregatorV3Interface} from "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol";

contract Counter is AutomationCompatibleInterface {
    uint256 public counter;

    AggregatorV3Interface internal dataFeed;

    uint256 public immutable interval;

    uint256 public lastTimeStamp;

    mapping(uint256 => address) public lastCounterUpdate;

    constructor() {
        interval = 120;
        lastTimeStamp = block.timestamp;

        counter = 0;

        /**
         * Network: BaseSepolia
         * Aggregator: BTC/USD
         * Address: 0x0FB99723Aee6f420beAD13e6bBB79b7E6F034298
         */
        dataFeed = AggregatorV3Interface(
            0x0FB99723Aee6f420beAD13e6bBB79b7E6F034298
        );
    }

    function checkUpkeep(
        bytes calldata /* checkData */
    )
        external
        view
        override
        returns (bool upkeepNeeded, bytes memory /* performData */)
    {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            counter = counter + 1;
            lastCounterUpdate[counter] = msg.sender;
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }

    function getChainlinkDataFeedLatestAnswer() public view returns (int) {
        // prettier-ignore
        (
            /* uint80 roundId */,
            int256 answer,
            /*uint256 startedAt*/,
            /*uint256 updatedAt*/,
            /*uint80 answeredInRound*/
        ) = dataFeed.latestRoundData();
        return answer;
    }
}
